import os
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
import pickle
import csv
import sys
import json
import random
from pathlib import Path
import joblib

from signature_description_analysis.signature_description_classifier import SignatureDescriptionClassifier
from behavior_api_stats_analysis.behavior_api_stats_classifier import ApiStatsClassifier
from network_protocol_count_analysis.network_protocol_count_classifier import NetworkProtocolCountClassifier

BASE_PATH = os.getcwd()
DIR_PATH = '/mnt/D/C3iHackathonDataset/'
DYNAMIC_DIR = 'dynamic'
BENIGN_DIR = 'Benign'
MALWARE_DIR = 'Malware'


with open('training_data.csv', newline='') as f:
    reader = csv.reader(f)
    training_data = list(reader)
    
with open('validation_data.csv', newline='') as f:
    reader = csv.reader(f)
    validation_data = list(reader)

print('####################################################################################')
print('Behavior API Stats Classification')
print('####################################################################################')
apiStatsClassifier = ApiStatsClassifier(BASE_PATH, DIR_PATH, DYNAMIC_DIR, BENIGN_DIR, MALWARE_DIR)
clf = RandomForestClassifier()
# apiStatsClassifier.train(clf)
# apiStatsClassifier.train_classifier(clf)
# apiStatsClassifier.save_trained_model()

print('####################################################################################')
print('Network Protocol Count Classification')
print('####################################################################################')
networkProtocolCountClassifier = NetworkProtocolCountClassifier(BASE_PATH, DIR_PATH, DYNAMIC_DIR, BENIGN_DIR, MALWARE_DIR)
clf = RandomForestClassifier()
# networkProtocolCountClassifier.train(clf)
# networkProtocolCountClassifier.train_classifier(clf)
# networkProtocolCountClassifier.save_trained_model()

    
print('####################################################################################')
print('Signature Description Classification')
print('####################################################################################')
signatureDescriptionClassifier = SignatureDescriptionClassifier(BASE_PATH, DIR_PATH, DYNAMIC_DIR, BENIGN_DIR, MALWARE_DIR)
clf = RandomForestClassifier()
# signatureDescriptionClassifier.train(clf)
# signatureDescriptionClassifier.train_classifier(clf)
# signatureDescriptionClassifier.save_trained_model()

